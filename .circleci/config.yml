version: 2

defaults: &defaults
  docker:
  - image: replicated/gitops-builder:node8-go11
  working_directory: ~/repo
  environment: &environment
    PROJECT_NAME: install-scripts
    ECR_REPO: 923411875752.dkr.ecr.us-east-1.amazonaws.com
    OVERLAY_PATH: kustomize/overlays/staging
    GITOPS_BRANCH: master
    DOCKERFILE: deploy/Dockerfile.prod

jobs:
  test:
    <<: *defaults
    steps:
      - checkout
      - run: sudo apt-get update; sudo apt-get install shunit2
      - run: sudo pip install pytest # todo cache these
      - run: sudo make deps # todo cache these
      - run: make test

  build_k8s_bundles:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS quay.io
      - run:
          name: make
          command: |
            cd bundles/k8s-containers
            make deps
            make update_k8s_manifest_${K8S_VERSION} build_${K8S_VERSION} push_${K8S_VERSION}

  build_ubuntu_docker_package:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: apk add make
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS quay.io
      - run:
          name: build & push
          command: |
            cd bundles/docker-ubuntu1604
            make build push

  build_ubuntu_k8s_packages:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: apk add make
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS quay.io
      - run:
          name: build & push
          command: |
            cd bundles/k8s-ubuntu1604
            make $K8S_VERSION

  build_k8s_cni:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: apk add make
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS quay.io
      - run:
          name: build & push
          command: |
            cd bundles/k8s-cni-v0.6.0
            make build push

  build_rhel_docker_package:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: apk add make
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS quay.io
      - run:
          name: build & push
          command: |
            cd bundles/docker-rhel7
            make build push

  build_rhel_k8s_packages:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: apk add make
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS quay.io
      - run:
          name: build & push
          command: |
            cd bundles/k8s-rhel7
            make $K8S_VERSION

  build_staging_docker_image:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.06.0-ce
      - run: |
          export WORKDIR=`pwd`
          export CIRCLE_PROJECT_REPONAME=$PROJECT_NAME
          build-docker
      - deploy:
          name: push image
          command: |
            export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY
            export CIRCLE_PROJECT_REPONAME=$PROJECT_NAME
            push-docker

  build_production_docker_image:
    <<: *defaults
    environment:
      <<: *environment
      ECR_REPO: 799720048698.dkr.ecr.us-east-1.amazonaws.com
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.06.0-ce
      - run: |
          export WORKDIR=`pwd`
          export CIRCLE_PROJECT_REPONAME=$PROJECT_NAME
          build-docker
      - deploy:
          name: push image
          command: |
            export AWS_ACCESS_KEY_ID=$PRODUCTION_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$PRODUCTION_AWS_SECRET_ACCESS_KEY
            export CIRCLE_PROJECT_REPONAME=$PROJECT_NAME
            push-docker

  deploy_staging_ecs:
    <<: *defaults
    steps:
      - setup_remote_docker
      - deploy:
          name: Maybe deploy staging to ecs
          command: |
            set -vu
            if [ "${CIRCLE_PROJECT_USERNAME}" == "replicatedhq" ]; then
              export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID
              export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY
              $(/home/circleci/.local/bin/aws ecr get-login --no-include-email --region us-east-1)
              docker run -it \
                -e AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID \
                -e AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY \
                923411875752.dkr.ecr.us-east-1.amazonaws.com/deployer:latest \
                ecs \
                deploy \
                --timeout 1200 \
                -i ${PROJECT_NAME} 923411875752.dkr.ecr.us-east-1.amazonaws.com/${PROJECT_NAME}:${CIRCLE_SHA1:0:7} \
                --region us-east-1 \
                tf-api-staging ${PROJECT_NAME}
            fi

  deploy_staging_eks:
    <<: *defaults
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
          - "25:51:68:66:6d:12:c7:84:f4:18:97:6a:7c:2e:f8:3d"
      - deploy:
          name: Maybe deploy staging to eks
          command: |
            export WORKDIR=`pwd`
            export CIRCLE_PROJECT_REPONAME=$PROJECT_NAME
            deploy

  deploy_production_ecs:
    <<: *defaults
    steps:
      - setup_remote_docker
      - deploy:
          name: Maybe deploy production to ecs
          command: |
            set -vu
            if [ "${CIRCLE_PROJECT_USERNAME}" == "replicatedhq" ]; then
              export AWS_ACCESS_KEY_ID=$PRODUCTION_AWS_ACCESS_KEY_ID
              export AWS_SECRET_ACCESS_KEY=$PRODUCTION_AWS_SECRET_ACCESS_KEY
              $(/home/circleci/.local/bin/aws ecr get-login --no-include-email --region us-east-1)
              docker run -it \
                -e AWS_ACCESS_KEY_ID=$PRODUCTION_AWS_ACCESS_KEY_ID \
                -e AWS_SECRET_ACCESS_KEY=$PRODUCTION_AWS_SECRET_ACCESS_KEY \
                799720048698.dkr.ecr.us-east-1.amazonaws.com/deployer:latest \
                ecs \
                deploy \
                --timeout 1200 \
                -i ${PROJECT_NAME} 799720048698.dkr.ecr.us-east-1.amazonaws.com/${PROJECT_NAME}:${CIRCLE_SHA1:0:7} \
                --region us-east-1 \
                tf-api-production ${PROJECT_NAME}
            fi

  deploy_production_eks:
    <<: *defaults
    environment:
      <<: *environment
      ECR_REPO: 799720048698.dkr.ecr.us-east-1.amazonaws.com
      OVERLAY_PATH: kustomize/overlays/production
      GITOPS_BRANCH: release
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
          - "25:51:68:66:6d:12:c7:84:f4:18:97:6a:7c:2e:f8:3d"
      - deploy:
          name: Maybe deploy production to eks
          command: |
            export WORKDIR=`pwd`
            export CIRCLE_PROJECT_REPONAME=$PROJECT_NAME
            deploy


workflows:
  version: 2
  build_accept_deploy:
    jobs:
      - test
      - build_staging_docker_image:
          filters:
            branches:
              only: master
      - build_production_docker_image:
          filters:
            branches:
              only: master
      - deploy_staging_ecs:
          requires:
            - test
            - build_staging_docker_image
          filters:
            branches:
              only: master
      - deploy_staging_eks:
          requires:
            - test
            - build_staging_docker_image
          # filters:
          #   branches:
          #     only: master
      - hold:
          type: approval
          requires:
            - deploy_staging_ecs
            - deploy_staging_eks
          filters:
            branches:
              only: master
      - deploy_production_ecs:
          requires:
            - build_production_docker_image
            - hold
          filters:
            branches:
              only: master
      - deploy_production_eks:
          requires:
            - build_production_docker_image
            - hold
          filters:
            branches:
              only: master
